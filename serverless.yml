# For full config options, check the docs: docs.serverless.com

# Plugins
# serverless-iam-roles-per-function: https://github.com/functionalone/serverless-iam-roles-per-function
#    Allows inheriting default IAM settings from the provider layer, and specifying more specific permissions per function without repeating common
# serverless-domain-manager: https://github.com/amplify-education/serverless-domain-manager
#    Allows setting up a custom domain name (*.starchartlabs.org) for the generated API. This first requires generating an ACM cert for the domain

plugins:
  - serverless-iam-roles-per-function
  - serverless-domain-manager

service: chronicler

# Pin your service to only deploy with a specific Serverless version
frameworkVersion: "=1.31.0"

provider:
  name: aws
  runtime: java8
  logRetentionInDays: 7
  stageTags:
    SERVICE: "${self:service}"
  tags:
    SERVICE: "${self:service}"
    STAGE: "${self:provider.stage}"

# TODO Appears default variable syntax is broken, hopefully fixed by production time so prod can be set to just service name
# https://github.com/serverless/serverless/issues/3714
custom:
  customDomain:
    domainName: "${self:service}-${self:provider.stage}.starchartlabs.org"
    basePath: ''
    certificateName: '*.starchartlabs.org'
    createRoute53Record: false


package:
  individually: true

# TODO external various names and keys to variables
functions:
  webhook-handler:
    package:
      artifact: webhook-handler/build/distributions/webhook-handler.zip
    handler: org.starchartlabs.chronicler.webhook.handler.Handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "ssm:GetParameter"
         - "ssm:GetParametersByPath"
       Resource: { Fn::Join: [":", [ "arn:aws:ssm", { "Ref": "AWS::Region" }, { Ref: "AWS::AccountId" }, "parameter/${self:provider.stage}/chronicler/*" ]] }
    -  Effect: "Allow"
       Action:
         - "SNS:Publish"
       Resource: { Fn::Join: [":", ["arn:aws:sns", { "Ref": "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "${self:provider.stage}_chronicler_diff-topic" ] ]  }
    environment:
        GITHUB_WEBHOOK_SECRET_SSM: /${self:provider.stage}/chronicler/github/webhook-secret
        SNS_TOPIC_ARN: { Fn::Join: [":", ["arn:aws:sns", { "Ref": "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "${self:provider.stage}_chronicler_diff-topic" ] ]  }
    events:
        - http:
            path: github/webhooks
            method: post
  diff-analyzer:
    package:
      artifact: diff-analyzer/build/distributions/diff-analyzer.zip
    handler: org.starchartlabs.chronicler.diff.analyzer.Handler
    iamRoleStatementsInherit: true
    events:
        - sns: ${self:provider.stage}_chronicler_diff-topic

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
