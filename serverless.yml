# For full config options, check the docs: docs.serverless.com

# TODO Document manual setup (secure parameter store values, github app, etc) required before deploy
# GitHub App
# CNAME for URL (Google Domains)
# /${self:provider.stage}/${self:service}/github/webhook-secret (encrypted)
# /${self:provider.stage}/${self:service}/github/app/key (encrypted)
# /${self:provider.stage}/${self:service}/github/app/id (string)

# Plugins
# serverless-iam-roles-per-function: https://github.com/functionalone/serverless-iam-roles-per-function
#    Allows inheriting default IAM settings from the provider layer, and specifying more specific permissions per function without repeating common
# serverless-domain-manager: https://github.com/amplify-education/serverless-domain-manager
#    Allows setting up a custom domain name (*.starchartlabs.org) for the generated API. This first requires generating an ACM cert for the domain
# serverless-s3-deploy
#    Allows integrated deployment of files to S3 buckets

plugins:
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-s3-deploy

service: chronicler

# Pin your service to only deploy with a specific Serverless version
# frameworkVersion: "=1.31.0"

provider:
  name: aws
  runtime: java8
  logRetentionInDays: 7
  stageTags:
    SERVICE: "${self:service}"
  tags:
    SERVICE: "${self:service}"
    STAGE: "${self:provider.stage}"

# TODO Appears default variable syntax is broken, hopefully fixed by production time so prod can be set to just service name
# https://github.com/serverless/serverless/issues/3714
custom:
  topic:
    diff: "${self:provider.stage}_chronicler_diff-topic"
  customDomain:
    domainName: "${self:service}-${self:provider.stage}.starchartlabs.org"
    basePath: ''
    certificateName: '*.starchartlabs.org'
    createRoute53Record: false
  assets:
    auto: true
    targets:
      - bucket:
          Ref: UploadBucket
        files:
          - source: html/
            globs: 
              - 'dev.html'
              - '**/images/*.png'
              - '**/styles/*.css'


package:
  individually: true

# TODO external various names and keys to variables
functions:
  webhook-handler:
    package:
      artifact: webhook-handler/build/distributions/webhook-handler.zip
    handler: org.starchartlabs.chronicler.webhook.handler.Handler
    description: Receives GitHub webhook events and performs initial verification/processing
    iamRoleStatementsInherit: true
    iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "ssm:GetParameter"
         - "ssm:GetParametersByPath"
       Resource: { Fn::Join: [":", [ "arn:aws:ssm", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "parameter/${self:provider.stage}/${self:service}/github/webhook-secret" ]] }
    -  Effect: "Allow"
       Action:
         - "SNS:Publish"
       Resource: { Fn::Join: [":", ["arn:aws:sns", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "${self:custom.topic.diff}" ] ] }
    environment:
        GITHUB_WEBHOOK_SECRET_SSM: /${self:provider.stage}/${self:service}/github/webhook-secret
        SNS_TOPIC_ARN: { Fn::Join: [":", ["arn:aws:sns", { "Ref": "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "${self:custom.topic.diff}" ] ]  }
    events:
        - http:
            path: github/webhooks
            method: post
  diff-analyzer:
    package:
      artifact: diff-analyzer/build/distributions/diff-analyzer.zip
    handler: org.starchartlabs.chronicler.diff.analyzer.aws.Handler
    description: Takes processed GitHub data and determines if the changeset meets relevant criteria
    timeout: 300
    iamRoleStatementsInherit: true
    iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "ssm:GetParameter"
         - "ssm:GetParametersByPath"
       Resource: { Fn::Join: [":", [ "arn:aws:ssm", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "parameter/${self:provider.stage}/${self:service}/github/app/*" ]] }
    environment:
        GITHUB_APP_KEY_SSM: /${self:provider.stage}/${self:service}/github/app/key
        GITHUB_APP_ID_SSM: /${self:provider.stage}/${self:service}/github/app/id
        #GITHUB_APP_ID: ${ssm:/${self:provider.stage}/${self:service}/github/app/id}
    events:
        - sns: ${self:custom.topic.diff}
        
# TODO Upload file to created bucket
resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-${self:provider.stage}-statichomepagebucket"
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
